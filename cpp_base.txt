###id:1
###q:
Which iterators are available for string? What is their cool feature?
###a: 
begin - end
rbegin - rend
cbegin - cend
crbegin - crend
Cool feature - random access
###end

###id:2
###q:
What is the return type of string::begin() and string::cbegin()?
###a: 
string::iterator
string::const_iterator
###end

###id:3
###q:
What is the return type of string::rbegin() and string::crbegin()?
###a: 
string::reverse_iterator
string::const_reverse_iterator
###end

###id:4
###q:
How to construct a string from a substring of another string?
###a: 
string(const string& str, size_t pos, size_t len = npos);
###end

###id:5
###q:
How to construct a string Copies the first n characters from the array of characters pointed by s? And null-terminated array?
###a: 
string (const char* s, size_t n);
string (const char* s);
###end

###id:6
###q:
Fills the string with n consecutive copies of character c.
###a: 
string (size_t n, char c);
###end

###id:7
###q:
What is string::npos and where is it used?
###a: 
A value of string::npos indicates all characters until the end of str. (if we don't want to calculate explicitly the
number of characters). string (const string& str, size_t pos, size_t len = npos);
###end

###id:8
###q:
What is the difference between string::size(), string::length(), string::max_size()?
###a: 
string::size() = string::length() Returns the length of the string, in terms of bytes.
Returns the length of the string, in terms of bytes. This is the number of actual bytes that conform the contents of the string, which is not necessarily equal to its storage capacity.
Note that string objects handle bytes without knowledge of the encoding that may eventually be used to encode the characters it contains. 
Therefore, the value returned may not correspond to the actual number of encoded characters in sequences of multi-byte or variable-length characters (such as UTF-8).
string = basic_string<char> (so bytes = characters)
This is the maximum potential length the string can reach due to known system or library implementation limitations, 
but the object is not guaranteed to be able to reach that length: it can still fail to allocate storage at any point before that length is reached.
###end

###id:9
###q:
What is string::capacity()?
###a: 
Returns the size of the storage space currently allocated for the string, expressed in terms of bytes.
The capacity of a string can be altered any time the object is modified, even if this modification implies a reduction in size or if the capacity has not been exhausted (this is in contrast with the guarantees given 
to capacity in vector containers).
The capacity of a string can be explicitly altered by calling member reserve.
###end

###id:10
###q:
How to request capacity change in string?
###a: 
void reserve (size_t n = 0);
If n is greater than the current string capacity, the function causes the container to increase its capacity to n characters (or greater).
In all other cases, it is taken as a non-binding request to shrink the string capacity: the container implementation is free to optimize otherwise and leave the string with a capacity greater than n.
This function has no effect on the string length and cannot alter its content.

void shrink_to_fit();
The request is non-binding, and the container implementation is free to optimize otherwise and leave the string with a capacity greater than its size.
This function has no effect on the string length and cannot alter its content.
###end

###id:11
###q:
How to erase the contents of the strig? What side effects does it have?
###a: 
void clear();
No side effects )
###end

###id:12
###q:
How to test whether the string is empty?
###a: 
bool empty() const;
###end

###id:13
###q:
What are element access functions for a string?
###a: 
operator[], at(), back(), front()
###end


###id:14
###q:
string::operator[]
###a: 
char& operator[] (size_t pos);
const char& operator[] (size_t pos) const;
Returns a reference to the character at position pos in the string.
NOTE: size_t is an unsigned integral type !
If pos is equal to the string length, the function returns a reference to the null character that follows the last character in the string (which should not be modified).
###end


###id:15
###q:
string::at()
###a: 
char& at (size_t pos);
const char& at (size_t pos) const;
Returns a reference to the character at position pos in the string.
The function automatically checks whether pos is the valid position of a character in the string (i.e., whether pos is less than the string length), throwing an out_of_range exception if it is not.

###end


###id:16
###q:
string::front(), string::back()
###a: 
char& back();
const char& back() const;
char& front();
const char& front() const;
These functions shall not be called on empty strings.
###end


###id:17
###q:
Appending to a string
###a: 
string::operator += is a subset ob string::append()
string& operator+= ()
string& append()
+ NOTE: void push_back (char c)

operator +=
(char c)

Common signatures:
1. (const string& str)
2. (const char* s)
3. (initializer_list<char> il)

append:
1. (const string& str, size_t subpos, size_t sublen = npos)
2. (const char* s, size_t n)
3. (size_t n, char c)
4. template <class InputIterator> string& append (InputIterator first, InputIterator last);
###end

###id:18
###q:
How can one assign the contents of the string?
###a: 
string& string::operator= ()
string& assign()
Parameter lists are like in  appending.
string, substring, c-string, buffer, fill, range, initializer list, move
###end

###id:19
###q:
How does resize work?
###a: 
void resize (size_t n);
void resize (size_t n, char c);
Resizes the string to a length of n characters.
If n is smaller than the current string length, the current value is shortened to its first n character, removing the characters beyond the nth.
If n is greater than the current string length, the current content is extended by inserting at the end as many characters as needed to reach a
size of n. If c is specified, the new elements are initialized as copies of c, otherwise, they are value-initialized characters (null characters).
###end

###id:20
###q:
How to erase the contents of the string?
###a: 
string& erase (size_t pos = 0, size_t len = npos);
iterator erase (const_iterator p);
iterator erase (const_iterator first, const_iterator last);
void pop_back(); erase signatures: string, substring,  c-string, buffer, fill, range, init-list
###end

###id:21
###q:

###a: 

###end

###id:2
###q:

###a: 

###end

###id:2
###q:

###a: 

###end

###id:2
###q:

###a: 

###end

###id:2
###q:

###a: 

###end

###id:2
###q:

###a: 

###end